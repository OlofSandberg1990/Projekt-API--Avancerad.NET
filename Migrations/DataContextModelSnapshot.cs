// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projekt_API__Avancerad.NET.Data;

#nullable disable

namespace Projekt_API__Avancerad.NET.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingSystemLibrary.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            Password = "Admin123"
                        });
                });

            modelBuilder.Entity("BookingSystemLibrary.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 2,
                            CustomerId = 1,
                            Description = "Technical support session",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Support Session"
                        },
                        new
                        {
                            Id = 2,
                            CompanyId = 2,
                            CustomerId = 2,
                            Description = "Scheduled data backup",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 7, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Data Backup"
                        },
                        new
                        {
                            Id = 3,
                            CompanyId = 6,
                            CustomerId = 3,
                            Description = "Consultation for website development",
                            DurationInMinutes = 60,
                            StartTime = new DateTime(2024, 5, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Website Consultation"
                        },
                        new
                        {
                            Id = 4,
                            CompanyId = 1,
                            CustomerId = 4,
                            Description = "Upgrade network infrastructure",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 9, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Network Upgrade"
                        },
                        new
                        {
                            Id = 5,
                            CompanyId = 5,
                            CustomerId = 5,
                            Description = "Training session for new software",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Software Training"
                        },
                        new
                        {
                            Id = 6,
                            CompanyId = 9,
                            CustomerId = 6,
                            Description = "Consultation for IT infrastructure",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 11, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "IT Consultation"
                        },
                        new
                        {
                            Id = 7,
                            CompanyId = 7,
                            CustomerId = 7,
                            Description = "Upgrading system components",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "System Upgrade"
                        },
                        new
                        {
                            Id = 8,
                            CompanyId = 8,
                            CustomerId = 8,
                            Description = "Optimizing database performance",
                            DurationInMinutes = 60,
                            StartTime = new DateTime(2024, 5, 13, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Database Optimization"
                        },
                        new
                        {
                            Id = 9,
                            CompanyId = 9,
                            CustomerId = 9,
                            Description = "Comprehensive security audit",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 14, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Security Audit"
                        },
                        new
                        {
                            Id = 10,
                            CompanyId = 10,
                            CustomerId = 10,
                            Description = "Installing new software",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 15, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Software Installation"
                        },
                        new
                        {
                            Id = 11,
                            CompanyId = 3,
                            CustomerId = 2,
                            Description = "Technical meeting for project planning",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Technical Meeting"
                        },
                        new
                        {
                            Id = 12,
                            CompanyId = 4,
                            CustomerId = 4,
                            Description = "Demonstration of new products",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Product Demo"
                        },
                        new
                        {
                            Id = 13,
                            CompanyId = 6,
                            CustomerId = 6,
                            Description = "Routine maintenance check",
                            DurationInMinutes = 60,
                            StartTime = new DateTime(2024, 5, 18, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Maintenance Check"
                        },
                        new
                        {
                            Id = 14,
                            CompanyId = 7,
                            CustomerId = 7,
                            Description = "Kickoff meeting for new project",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 19, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project Kickoff"
                        },
                        new
                        {
                            Id = 15,
                            CompanyId = 8,
                            CustomerId = 9,
                            Description = "Training session for staff",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Training Session"
                        },
                        new
                        {
                            Id = 16,
                            CompanyId = 9,
                            CustomerId = 10,
                            Description = "Meeting with potential client",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 21, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Client Meeting"
                        },
                        new
                        {
                            Id = 17,
                            CompanyId = 10,
                            CustomerId = 1,
                            Description = "Review of current systems",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 22, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "System Review"
                        },
                        new
                        {
                            Id = 18,
                            CompanyId = 1,
                            CustomerId = 3,
                            Description = "Consultation for future projects",
                            DurationInMinutes = 60,
                            StartTime = new DateTime(2024, 5, 23, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Consultation"
                        },
                        new
                        {
                            Id = 19,
                            CompanyId = 2,
                            CustomerId = 5,
                            Description = "Session to gather client feedback",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 5, 24, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Feedback Session"
                        },
                        new
                        {
                            Id = 20,
                            CompanyId = 3,
                            CustomerId = 8,
                            Description = "Meeting to discuss company strategy",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 5, 25, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Strategy Meeting"
                        },
                        new
                        {
                            Id = 21,
                            CompanyId = 4,
                            CustomerId = 7,
                            Description = "Planning session for upcoming projects",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 6, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Planning Session"
                        },
                        new
                        {
                            Id = 22,
                            CompanyId = 5,
                            CustomerId = 6,
                            Description = "Review of company budget",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 6, 3, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Budget Review"
                        },
                        new
                        {
                            Id = 23,
                            CompanyId = 6,
                            CustomerId = 4,
                            Description = "Review of company performance",
                            DurationInMinutes = 60,
                            StartTime = new DateTime(2024, 6, 5, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Performance Review"
                        },
                        new
                        {
                            Id = 24,
                            CompanyId = 7,
                            CustomerId = 3,
                            Description = "Meeting to discuss project details",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 6, 7, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project Meeting"
                        },
                        new
                        {
                            Id = 25,
                            CompanyId = 8,
                            CustomerId = 2,
                            Description = "Presentation to potential clients",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 6, 9, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Client Presentation"
                        },
                        new
                        {
                            Id = 26,
                            CompanyId = 9,
                            CustomerId = 1,
                            Description = "Meeting with project team",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 6, 11, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Team Meeting"
                        },
                        new
                        {
                            Id = 27,
                            CompanyId = 10,
                            CustomerId = 10,
                            Description = "Review of technical aspects",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 6, 13, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Technical Review"
                        },
                        new
                        {
                            Id = 28,
                            CompanyId = 1,
                            CustomerId = 9,
                            Description = "Meeting to discuss project progress",
                            DurationInMinutes = 60,
                            StartTime = new DateTime(2024, 6, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Progress Meeting"
                        },
                        new
                        {
                            Id = 29,
                            CompanyId = 2,
                            CustomerId = 8,
                            Description = "Update meeting with client",
                            DurationInMinutes = 90,
                            StartTime = new DateTime(2024, 6, 17, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Client Update"
                        },
                        new
                        {
                            Id = 30,
                            CompanyId = 3,
                            CustomerId = 7,
                            Description = "Training session for staff",
                            DurationInMinutes = 120,
                            StartTime = new DateTime(2024, 6, 19, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Staff Training"
                        });
                });

            modelBuilder.Entity("BookingSystemLibrary.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("ChangeDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("BookingSystemLibrary.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "kontakt@gekas.se",
                            Name = "Gekås",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "kontakt@ica.se",
                            Name = "ICA",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 3,
                            Email = "kontakt@coop.se",
                            Name = "Coop",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 4,
                            Email = "kontakt@campus.se",
                            Name = "Campus",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 5,
                            Email = "kontakt@elgiganten.se",
                            Name = "Elgiganten",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 6,
                            Email = "kontakt@netonnet.se",
                            Name = "Net On Net",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 7,
                            Email = "kontakt@campino.se",
                            Name = "Campino",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 8,
                            Email = "kontakt@dressman.se",
                            Name = "Dressman",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 9,
                            Email = "kontakt@lindex.se",
                            Name = "Lindex",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 10,
                            Email = "kontakt@hm.se",
                            Name = "H&M",
                            Password = "Test123"
                        },
                        new
                        {
                            Id = 11,
                            Email = "kontakt@volvo.se",
                            Name = "Volvo",
                            Password = "Test123"
                        });
                });

            modelBuilder.Entity("BookingSystemLibrary.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "olof@test.com",
                            Name = "Olof Sandberg",
                            Password = "Test123",
                            Phone = "+46701234567"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jonatan@test.com",
                            Name = "Jonatan Nordin",
                            Password = "Test123",
                            Phone = "+46706543210"
                        },
                        new
                        {
                            Id = 3,
                            Email = "christian@test.com",
                            Name = "Christian Rapp",
                            Password = "Test123",
                            Phone = "+46709876543"
                        },
                        new
                        {
                            Id = 4,
                            Email = "anna@test.com",
                            Name = "Anna Söderberg",
                            Password = "Test123",
                            Phone = "+46702345678"
                        },
                        new
                        {
                            Id = 5,
                            Email = "nina@test.com",
                            Name = "Nina Lindberg Nilsson",
                            Password = "Test123",
                            Phone = "+46707654321"
                        },
                        new
                        {
                            Id = 6,
                            Email = "par@test.com",
                            Name = "Pär Sandberg",
                            Password = "Test123",
                            Phone = "+46701123456"
                        },
                        new
                        {
                            Id = 7,
                            Email = "tobias@test.com",
                            Name = "Tobias Qlok",
                            Password = "Test123",
                            Phone = "+46702234567"
                        },
                        new
                        {
                            Id = 8,
                            Email = "reidar@test.com",
                            Name = "Reidar Qlok",
                            Password = "Test123",
                            Phone = "+46703345678"
                        },
                        new
                        {
                            Id = 9,
                            Email = "pepsi@test.com",
                            Name = "Pepsi Sandberg",
                            Password = "Test123",
                            Phone = "+46704456789"
                        },
                        new
                        {
                            Id = 10,
                            Email = "miki@test.com",
                            Name = "Miki Vidacic",
                            Password = "Test123",
                            Phone = "+46705567890"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookingSystemLibrary.Appointment", b =>
                {
                    b.HasOne("BookingSystemLibrary.Company", "Company")
                        .WithMany("Appointments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingSystemLibrary.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingSystemLibrary.Company", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BookingSystemLibrary.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
